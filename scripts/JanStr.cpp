
void JanStr () { return;}   //Safeguard

extern "C" void Get_number (long double* destination, char* txt);

asm(
      "                                                                                                     \n"
      " #----------------------------------------------------                                               \n"
      " #				CHECK IS IT A BINARY NUMBER                                                         \n"
      " #----------------------------------------------------                                               \n"
      "                                                                                                     \n"
      " INI_Check_is_it_a_binary_number: #PROC                                                              \n"
      "                                                                                                     \n"
      " 		xor  eax, eax                                                                               \n"
      " 		test rdx, rdx                                                                               \n"
      " 		je   L_CHECK_BINARY_INCORRECT_ADDRESS                                                       \n"
      " 		push rsi                                                                                    \n"
      " 		mov  rsi, rdx                                                                               \n"
      " L_CBN_RSI_IS_OK:                                                                                    \n"
      "                                                                                                     \n"
      "                                                                                                     \n"
      " L_CBN_CHECK_MINUS_AND_PERCENT_AGAIN:                                                                \n"
      " 		cmp  byte ptr [rsi], '-'                                                                    \n"
      " 		jne  L_CBN_DONT_SHIFT_OF_MINUS                                                              \n"
      " 		inc  rsi                                                                                    \n"
      " 		jmp  L_CBN_CHECK_MINUS_AND_PERCENT_AGAIN                                                    \n"
      " L_CBN_DONT_SHIFT_OF_MINUS:                                                                          \n"
      "                                                                                                     \n"
      " 		cmp  byte ptr [rsi], '%'                                                                    \n"
      " 		jne  L_CBN_DONT_SHIFT                                                                       \n"
      " 		inc  rsi                                                                                    \n"
      " 		mov  ah, 1                                                                                  \n"
      " 		jmp  L_CBN_CHECK_MINUS_AND_PERCENT_AGAIN                                                    \n"
      " L_CBN_DONT_SHIFT:                                                                                   \n"
      "                                                                                                     \n"
      " L_CHECK_NEXT_CHAR_FOR_CHECK_BINARY:                                                                 \n"
      " 		mov  al, byte ptr [rsi]                                                                     \n"
      " 		inc  rsi                                                                                    \n"
      " 		                                                                                            \n"
      " 	# -- BIN SYMBOL --                                                                              \n"
      " 		cmp  al, 'b'                                                                                \n"
      " 		jne  L_CBN_CHECK_LINE_END                                                                   \n"
      " 		cmp  byte ptr [rsi], 0x00			# (oddziela wiersze)                                    \n"
      " 		je   L_YES_ITS_A_BINARY_NUMBER                                                              \n"
      " 		cmp  byte ptr [rsi], 0x1D			# (oddziela sekcje)                                     \n"
      " 		je   L_YES_ITS_A_BINARY_NUMBER                                                              \n"
      " 		                                                                                            \n"
      " L_CBN_CHECK_LINE_END:                                                                               \n"
      " 		cmp  al, 0x00						# (oddziela wiersze)                                    \n"
      " 		je   L_CBN_SET_ANSWER_AND_FINISH                                                            \n"
      " 		cmp  al, 0x1D						# (oddziela sekcje)                                     \n"
      " 		jne  L_CBN_CHECK_NUMBER                                                                     \n"
      " 		L_CBN_SET_ANSWER_AND_FINISH:                                                                \n"
      " 		movsx eax, ah                                                                               \n"
      " 		jmp  L_CHECK_BINARY_FINISH                                                                  \n"
      "                                                                                                     \n"
      " L_CBN_CHECK_NUMBER:                                                                                 \n"
      " 		cmp  al, '.'                                                                                \n"
      " 		je   L_CHECK_NEXT_CHAR_FOR_CHECK_BINARY                                                     \n"
      " 		cmp  al, '0'                                                                                \n"
      " 		jb   L_NO_IT_ISNT_A_BINARY_NUMBER                                                           \n"
      " 		cmp  al, '1'                                                                                \n"
      " 		ja   L_NO_IT_ISNT_A_BINARY_NUMBER                                                           \n"
      " 		jmp  L_CHECK_NEXT_CHAR_FOR_CHECK_BINARY                                                     \n"
      " L_NO_IT_ISNT_A_BINARY_NUMBER:                                                                       \n"
      " 		xor  eax, eax                                                                               \n"
      " 		jmp  L_CHECK_BINARY_FINISH                                                                  \n"
      " L_YES_ITS_A_BINARY_NUMBER:                                                                          \n"
      " 		mov  eax, 1                                                                                 \n"
      " L_CHECK_BINARY_FINISH:                                                                              \n"
      " 		pop  rsi                                                                                    \n"
      " L_CHECK_BINARY_INCORRECT_ADDRESS:                                                                   \n"
      " 		ret                                                                                         \n"
      "                                                                                                     \n"
      "                                                                                                     \n"
      " #----------------------------------------------------                                               \n"
      " #				CHECK IS IT A DECIMAL NUMBER                                                        \n"
      " #----------------------------------------------------                                               \n"
      "                                                                                                     \n"
      " INI_Check_is_it_a_decimal_number: #PROC                                                             \n"
      "                                                                                                     \n"
      " 		xor  eax, eax                                                                               \n"
      " 		test rdx, rdx                                                                               \n"
      " 		jne  L_CHECK_DECIMAL_INCORRECT_ADDRESS                                                      \n"
      " 		push rsi                                                                                    \n"
      " 		mov  rsi, rdx                                                                               \n"
      " L_CDN_RSI_IS_OK:                                                                                    \n"
      "                                                                                                     \n"
      " 	# --- NEGATION IS OK ---                                                                        \n"
      " L_CDN_CHECK_MINUS_AGAIN:                                                                            \n"
      " 		cmp  byte ptr [rsi], '-'                                                                    \n"
      " 		jne  L_SD_DONT_SHIFT                                                                        \n"
      " 		inc  rsi                                                                                    \n"
      " 		jmp  L_CDN_CHECK_MINUS_AGAIN                                                                \n"
      " L_SD_DONT_SHIFT:                                                                                    \n"
      "                                                                                                     \n"
      " 	# --- ? IS IT EMPTY LINE ? ---                                                                  \n"
      " 		cmp  byte ptr [rsi], 0x00                                                                   \n"
      " 		je   L_NO_IT_ISNT_A_DECIMAL_NUMBER                                                          \n"
      " 		cmp  byte ptr [rsi], 0x1D                                                                   \n"
      " 		je   L_NO_IT_ISNT_A_DECIMAL_NUMBER                                                          \n"
      " 		                                                                                            \n"
      " 	# --- LOOP CHECK NUMBER ---                                                                     \n"
      " L_CHECK_NEXT_CHAR_FOR_CHECK_DECIMAL:                                                                \n"
      " 		mov  al, byte ptr [rsi]                                                                     \n"
      " 		inc  rsi                                                                                    \n"
      " 		cmp  al, 0x00                                                                               \n"
      " 		je   L_YES_IT_IS_A_DECIMAL_NUMBER                                                           \n"
      " 		cmp  al, 0x1D                                                                               \n"
      " 		je   L_YES_IT_IS_A_DECIMAL_NUMBER                                                           \n"
      " 		cmp  al, '.'                                                                                \n"
      " 		je   L_CHECK_NEXT_CHAR_FOR_CHECK_DECIMAL                                                    \n"
      " 		cmp  al, '0'                                                                                \n"
      " 		jb   L_NO_IT_ISNT_A_DECIMAL_NUMBER                                                          \n"
      " 		cmp  al, '9'                                                                                \n"
      " 		ja   L_NO_IT_ISNT_A_DECIMAL_NUMBER                                                          \n"
      " 		cmp  al, ' '                                                                                \n"
      " 		ja   L_CHECK_NEXT_CHAR_FOR_CHECK_DECIMAL                                                    \n"
      "                                                                                                     \n"
      " L_NO_IT_ISNT_A_DECIMAL_NUMBER:                                                                      \n"
      " 		xor  eax, eax                                                                               \n"
      " 		jmp  L_CHECK_DECIMAL_FINISH                                                                 \n"
      " L_YES_IT_IS_A_DECIMAL_NUMBER:                                                                       \n"
      " 		mov  eax, 1                                                                                 \n"
      " L_CHECK_DECIMAL_FINISH:                                                                             \n"
      " 		pop  rsi                                                                                    \n"
      " L_CHECK_DECIMAL_INCORRECT_ADDRESS:                                                                  \n"
      " 		ret                                                                                         \n"
      "                                                                                                     \n"
      "                                                                                                     \n"
      " #----------------------------------------------------                                               \n"
      " #				CHECK IS IT A HEXADECIMAL NUMBER                                                    \n"
      " #----------------------------------------------------                                               \n"
      "                                                                                                     \n"
      " INI_Check_is_it_a_hexadecimal_number: #PROC                                                         \n"
      "                                                                                                     \n"
      " 		xor  eax, eax                                                                               \n"
      " 		test rdx, rdx                                                                               \n"
      " 		je   L_CHECK_HEXADECIMAL_INCORRECT_ADDRESS                                                  \n"
      " 		push rsi                                                                                    \n"
      " 		mov  rsi, rdx                                                                               \n"
      " L_CHN_RSI_IS_OK:                                                                                    \n"
      " 		                                                                                            \n"
      " 		                                                                                            \n"
      " L_CHN_CHECK_MINUS_AND_DOLLAR_AGAIN:                                                                 \n"
      " 		cmp  byte ptr [rsi], '-'                                                                    \n"
      " 		jne  L_SH_DONT_SHIFT_BECAUSE_OF_MINUS                                                       \n"
      " 		inc  rsi                                                                                    \n"
      " 		jmp  L_CHN_CHECK_MINUS_AND_DOLLAR_AGAIN                                                     \n"
      " L_SH_DONT_SHIFT_BECAUSE_OF_MINUS:                                                                   \n"
      "                                                                                                     \n"
      " 		cmp  byte ptr [rsi], '$'			# hexadecimal number symbol                             \n"
      " 		jne  L_SH_DONT_SHIFT                                                                        \n"
      " 		inc  rsi                                                                                    \n"
      " 		mov  ah, 1                                                                                  \n"
      " 		jmp  L_CHN_CHECK_MINUS_AND_DOLLAR_AGAIN                                                     \n"
      " L_SH_DONT_SHIFT:                                                                                    \n"
      "                                                                                                     \n"
      "                                                                                                     \n"
      " L_CHECK_NEXT_CHAR_IS_IT_ZERO_FOR_CHECK_HEXADECIMAL:                                                 \n"
      " 		mov  al, byte ptr [rsi]                                                                     \n"
      " 		inc  rsi                                                                                    \n"
      " 		cmp  al, '.'                                                                                \n"
      " 		je   L_CONTINUE_CHECK_FOR_CHECK_HEXADECIMAL                                                 \n"
      " 		cmp  al, '0'                                                                                \n"
      " 		jb   L_NO_IT_ISNT_A_HEXADECIMAL_NUMBER                                                      \n"
      " 		jne  L_CONTINUE_CHECK_FOR_CHECK_HEXADECIMAL                                                 \n"
      " 		cmp  byte ptr [rsi], 'x'                                                                    \n"
      " 		je   L_IT_IS_X                                                                              \n"
      " 		cmp  byte ptr [rsi], 'X'                                                                    \n"
      " 		jne  L_CHECK_NEXT_CHAR_IS_IT_ZERO_FOR_CHECK_HEXADECIMAL                                     \n"
      " L_IT_IS_X:                                                                                          \n"
      " 		mov  ah, 1                                                                                  \n"
      " 		inc  rsi                                                                                    \n"
      "                                                                                                     \n"
      " L_CHECK_NEXT_CHAR_FOR_CHECK_HEXADECIMAL:                                                            \n"
      " 		mov  al, byte ptr [rsi]                                                                     \n"
      " 		inc  rsi                                                                                    \n"
      " L_CONTINUE_CHECK_FOR_CHECK_HEXADECIMAL:                                                             \n"
      " 	# -- TERMINATORS --                                                                             \n"
      " 		cmp  al, 0x00				# line end			(oddziela linie)                            \n"
      " 		je   L_ANSWER_IS_IT_A_HEXADECIMAL_NUMBER                                                    \n"
      " 		cmp  al, 0x1D				# group separator	(oddziela sekcje)                           \n"
      " 		je   L_ANSWER_IS_IT_A_HEXADECIMAL_NUMBER                                                    \n"
      " 		                                                                                            \n"
      " 	# -- HEX SYMBOL --                                                                              \n"
      " 		cmp  al, 'H'				# hex num end                                                   \n"
      " 		je   L_CHN_H_FINAL                                                                          \n"
      " 		cmp  al, 'h'				# hex num end                                                   \n"
      " 		jne  L_CHN_CHECK_NUMBER                                                                     \n"
      "         L_CHN_H_FINAL:                                                                              \n"
      " 		cmp  byte ptr [rsi], 0x00                                                                   \n"
      " 		je   L_IT_IS_HEX_SYMBOL                                                                     \n"
      " 		cmp  byte ptr [rsi], 0x1D                                                                   \n"
      " 		jne  L_IT_ISNT_HEX_SYMBOL                                                                   \n"
      " 		L_IT_IS_HEX_SYMBOL:                                                                         \n"
      " 		mov  eax, 1					# yes it is a hex num                                           \n"
      " 		jmp  L_CHECK_HEXADECIMAL_FINISH                                                             \n"
      " 		L_IT_ISNT_HEX_SYMBOL:                                                                       \n"
      " 		                                                                                            \n"
      " 		L_CHN_CHECK_NUMBER:                                                                         \n"
      " 		cmp  al, '.'                                                                                \n"
      " 		je   L_CHECK_NEXT_CHAR_FOR_CHECK_HEXADECIMAL                                                \n"
      " 		                                                                                            \n"
      " 		cmp  al, '0'                                                                                \n"
      " 		jb   L_NO_IT_ISNT_A_HEXADECIMAL_NUMBER                                                      \n"
      " 		cmp  al, '9'                                                                                \n"
      " 		jbe  L_CHECK_NEXT_CHAR_FOR_CHECK_HEXADECIMAL                                                \n"
      " 		cmp  al, 'A'                                                                                \n"
      " 		jb   L_NO_IT_ISNT_A_HEXADECIMAL_NUMBER                                                      \n"
      " 		cmp  al, 'F'                                                                                \n"
      " 		jbe  L_SET_ITS_HEX_AND_CHECK_NEXT_CHAR                                                      \n"
      " 		cmp  al, 'a'                                                                                \n"
      " 		jb   L_NO_IT_ISNT_A_HEXADECIMAL_NUMBER                                                      \n"
      " 		cmp  al, 'f'                                                                                \n"
      " 		ja   L_NO_IT_ISNT_A_HEXADECIMAL_NUMBER                                                      \n"
      " L_SET_ITS_HEX_AND_CHECK_NEXT_CHAR:                                                                  \n"
      " 		mov  ah, 1                                                                                  \n"
      " 		jmp  L_CHECK_NEXT_CHAR_FOR_CHECK_HEXADECIMAL                                                \n"
      " L_LEST_CHECK_FOR_CHECK_HEXADECIMAL:                                                                 \n"
      " 		cmp  al, ' '                                                                                \n"
      " 		ja   L_CHECK_NEXT_CHAR_FOR_CHECK_HEXADECIMAL                                                \n"
      "                                                                                                     \n"
      "                                                                                                     \n"
      " L_NO_IT_ISNT_A_HEXADECIMAL_NUMBER:                                                                  \n"
      " 		xor  eax, eax                                                                               \n"
      " 		jmp  L_CHECK_HEXADECIMAL_FINISH                                                             \n"
      " L_ANSWER_IS_IT_A_HEXADECIMAL_NUMBER:                                                                \n"
      " 		movsx  eax, ah                                                                              \n"
      " L_CHECK_HEXADECIMAL_FINISH:                                                                         \n"
      " 		pop  rsi                                                                                    \n"
      " L_CHECK_HEXADECIMAL_INCORRECT_ADDRESS:                                                              \n"
      " 		ret                                                                                         \n"
      "                                                                                                     \n"
      "                                                                                                     \n"
      " #----------------------------------------------------                                               \n"
      " #				CHECK IS IT A HTML COLOUR                                                           \n"
      " #----------------------------------------------------                                               \n"
      "                                                                                                     \n"
      " INI_Check_is_it_a_html_colour: #PROC                                                                \n"
      "                                                                                                     \n"
      " 		xor  eax, eax                                                                               \n"
      " 		test rdx, rdx                                                                               \n"
      " 		je   L_CHC_INCORRECT_ADDRESS                                                                \n"
      " 		push rcx                                                                                    \n"
      " 		push rsi                                                                                    \n"
      " 		mov  rsi, rdx                                                                               \n"
      " L_CHC_RSI_IS_OK:                                                                                    \n"
      "                                                                                                     \n"
      " 		cmp byte ptr [rsi], '#'		#	begin is always #                                           \n"
      " 		jne  L_CHC_FINISH_FAILED                                                                    \n"
      " 		inc  rsi                                                                                    \n"
      " 		                                                                                            \n"
      " 		L_CHC_CHECK_HASHTAG_AGAIN:	#	every next # is ignored                                     \n"
      " 		cmp		byte ptr [rsi], '#'                                                                 \n"
      " 		jne		L_CHC_ITS_NOT_HASHTAG                                                               \n"
      " 		inc		rsi                                                                                 \n"
      " 		jmp		L_CHC_CHECK_HASHTAG_AGAIN                                                           \n"
      " 		L_CHC_ITS_NOT_HASHTAG:                                                                      \n"
      "                                                                                                     \n"
      " 	# ----------  LOOP  ----------                                                                  \n"
      " 	# init                                                                                          \n"
      " 		mov  cl, 0x06				# six chars to check                                            \n"
      "                                                                                                     \n"
      " 	# start                                                                                         \n"
      " L_CHC_CHECK_NEXT_CHAR:                                                                              \n"
      " 		mov  al, byte ptr [rsi]                                                                     \n"
      " 		inc  rsi                                                                                    \n"
      " 		                                                                                            \n"
      " 		cmp  al, 0x00				# line end                                                      \n"
      " 		je   L_CHC_FINISH_SUCCESS                                                                   \n"
      " 		cmp  al, 0x1D				# group separator	(oddziela sekcje)                           \n"
      " 		je   L_CHC_FINISH_SUCCESS                                                                   \n"
      " 		cmp  al, '0'                                                                                \n"
      " 		jb   L_CHC_FINISH_FAILED                                                                    \n"
      " 		cmp  al, '9'                                                                                \n"
      " 		jbe  L_CHC_TRY_TO_CHECK_NEXT_CHAR                                                           \n"
      " 		cmp  al, 'A'                                                                                \n"
      " 		jb   L_CHC_FINISH_FAILED                                                                    \n"
      " 		cmp  al, 'F'                                                                                \n"
      " 		jbe  L_CHC_TRY_TO_CHECK_NEXT_CHAR                                                           \n"
      " 		cmp  al, 'a'                                                                                \n"
      " 		jb   L_CHC_FINISH_FAILED                                                                    \n"
      " 		cmp  al, 'f'                                                                                \n"
      " 		ja   L_CHC_FINISH_FAILED                                                                    \n"
      " 		                                                                                            \n"
      " 		L_CHC_TRY_TO_CHECK_NEXT_CHAR:                                                               \n"
      " 		dec  cl                                                                                     \n"
      " 		jne  L_CHC_CHECK_NEXT_CHAR                                                                  \n"
      "                                                                                                     \n"
      "                                                                                                     \n"
      " 	# ----------  FINISH  ----------                                                                \n"
      " L_CHC_FINISH_SUCCESS:                                                                               \n"
      " 		mov  al, 0x01	#	EAX is xored from begin                                                 \n"
      " 		jmp  L_CHC_FINISH                                                                           \n"
      "                                                                                                     \n"
      " L_CHC_FINISH_FAILED:                                                                                \n"
      " 		xor  eax, eax                                                                               \n"
      "                                                                                                     \n"
      " L_CHC_FINISH:                                                                                       \n"
      " 		pop  rsi                                                                                    \n"
      " 		pop  rcx                                                                                    \n"
      " L_CHC_INCORRECT_ADDRESS:                                                                            \n"
      " 		ret                                                                                         \n"
      "                                                                                                     \n"
      "                                                                                                     \n"
      " #----------------------------------------------------                                               \n"
      " #				DECIMAL NUMBER TO FPU                                                               \n"
      " #----------------------------------------------------                                               \n"
      "                                                                                                     \n"
      " INI_Load_decimal_number_to_FPU: #PROC                                                               \n"
      "                                                                                                     \n"
      "         push rax                                                                                    \n"
      "         push rdx                                                                                    \n"
      "         push rbx                                                                                    \n"
      "         push rsp                                                                                    \n"
      "         push rbp                                                                                    \n"
      "         push rsi                                                                                    \n"
      "         push rdi                                                                                    \n"
      " 		xor		ebx, ebx				# It means - change sign                                    \n"
      "                                                                                                     \n"
      " 		mov		rsi, rdx                                                                            \n"
      " 		test	rsi, rsi                                                                            \n"
      " 		je		L_LDN_INCORRECT_ADDRESS                                                             \n"
      " 		                                                                                            \n"
      " 		                                                                                            \n"
      " 		L_LDN_CHECK_MINUS_AGAIN:                                                                    \n"
      " 		cmp		byte ptr [rsi], '-'                                                                 \n"
      " 		jne		L_LDN_ITS_NOT_MINUS                                                                 \n"
      " 		inc		rsi                                                                                 \n"
      " 		not		ebx                                                                                 \n"
      " 		jmp		L_LDN_CHECK_MINUS_AGAIN                                                             \n"
      " 		L_LDN_ITS_NOT_MINUS:                                                                        \n"
      " 		                                                                                            \n"
      " 		                                                                                            \n"
      " 		push	0x0A                                                                                \n"
      " 		fild	dword ptr [rsp]			# It's to do multiply                                       \n"
      " 		pop		rax                                                                                 \n"
      " 		fldz							# It will be loaded number                                  \n"
      " 		                                                                                            \n"
      " 		                                                                                            \n"
      " 		xor		eax, eax                                                                            \n"
      " 		push	rax                                                                                 \n"
      " 		L_LDN_RESTART_LOOP:                                                                         \n"
      " 		mov		al, [rsi]                                                                           \n"
      " 		cmp		al, 0x00                                                                            \n"
      " 		je		L_LDN_FINISH                                                                        \n"
      " 		cmp		al, 0x1D					# group separator	(oddziela sekcje)                   \n"
      " 		je		L_LDN_FINISH                                                                        \n"
      " 		cmp		al, '.'                                                                             \n"
      " 		je		L_LDN_START_LOAD_VALUE_AFTER_DOT                                                    \n"
      " 		                                                                                            \n"
      " 		                                                                                            \n"
      " 		fmul	st(0), st(1)			# multiply by 10                                            \n"
      " 		sub		al, 0x30                                                                            \n"
      " 		mov		[rsp], eax                                                                          \n"
      " 		fild	dword ptr [rsp]                                                                     \n"
      " 		faddp	st(1), st(0)			# add new value                                             \n"
      " 		inc		rsi                                                                                 \n"
      " 		jmp		L_LDN_RESTART_LOOP                                                                  \n"
      " 		                                                                                            \n"
      " 		                                                                                            \n"
      " 		                                                                                            \n"
      " 		                                                                                            \n"
      " 		                                                                                            \n"
      " 		                                                                                            \n"
      " 		                                                                                            \n"
      " 		L_LDN_START_LOAD_VALUE_AFTER_DOT:                                                           \n"
      " 		fldz                                                                                        \n"
      " 		mov		rdi, rsi                                                                            \n"
      " 		L_LDN_CHECK_NEXT_CHAR_FOR_FIND_END_OF_VALUE:                                                \n"
      " 		inc		rsi                                                                                 \n"
      " 		mov		al, [rsi]                                                                           \n"
      " 		cmp		al, 0x00                                                                            \n"
      " 		je		L_LDN_LOAD_DOT_VALUE                                                                \n"
      " 		cmp		al, 0x1D					# group separator	(oddziela sekcje)                   \n"
      " 		jne		L_LDN_CHECK_NEXT_CHAR_FOR_FIND_END_OF_VALUE                                         \n"
      " 		                                                                                            \n"
      " 		L_LDN_LOAD_DOT_VALUE:                                                                       \n"
      " 		dec		rsi                                                                                 \n"
      " 		L_LDN_RESTART_DOT_LOOP:                                                                     \n"
      " 		mov		al, [rsi]                                                                           \n"
      " 		sub		al, 0x30                                                                            \n"
      " 		                                                                                            \n"
      " 		cmp		al, 9                                                                               \n"
      " 		ja		L_LDN_SKIP_DOT_ADDITION                                                             \n"
      " 		                                                                                            \n"
      " 		                                                                                            \n"
      " 		fdiv	st(0), st(2)			# divide by 10                                              \n"
      " 		mov		[rsp], eax                                                                          \n"
      " 		fild	dword ptr [rsp]                                                                     \n"
      " 		faddp	st(1), st(0)			# add new value                                             \n"
      " 		L_LDN_SKIP_DOT_ADDITION:                                                                    \n"
      " 		dec		rsi                                                                                 \n"
      " 		cmp		rsi,rdi                                                                             \n"
      " 		ja		L_LDN_RESTART_DOT_LOOP                                                              \n"
      " 		                                                                                            \n"
      " 		                                                                                            \n"
      " 		                                                                                            \n"
      " 		L_LDN_DOT_FINISH:                                                                           \n"
      " 		fdiv	st(0), st(2)			# divide by 10                                              \n"
      " 		faddp	st(1), st(0)                                                                        \n"
      " 		                                                                                            \n"
      " 		L_LDN_FINISH:                                                                               \n"
      " 		pop		rax                                                                                 \n"
      " 		test	ebx, ebx                                                                            \n"
      " 		je		L_LDN_DONT_CHANGE_SIGN                                                              \n"
      " 		fchs                                                                                        \n"
      " 		L_LDN_DONT_CHANGE_SIGN:                                                                     \n"
      " 		ffree	st(1)                                                                               \n"
      " 		                                                                                            \n"
      " L_LDN_INCORRECT_ADDRESS:                                                                            \n"
      "         pop rdi                                                                                     \n"
      "         pop rsi                                                                                     \n"
      "         pop rbp                                                                                     \n"
      "         pop rsp                                                                                     \n"
      "         pop rbx                                                                                     \n"
      "         pop rdx                                                                                     \n"
      "         pop rax                                                                                     \n"
      " 		ret                                                                                         \n"
      "                                                                                                     \n"
      "                                                                                                     \n"
      " #----------------------------------------------------                                               \n"
      " #				HEXADECIMAL NUMBER TO FPU                                                           \n"
      " #----------------------------------------------------                                               \n"
      "                                                                                                     \n"
      " INI_Load_hexadecimal_number_to_FPU: #PROC                                                           \n"
      "                                                                                                     \n"
      "         push    rax                                                                                 \n"
      "         push    rdx                                                                                 \n"
      "         push    rbx                                                                                 \n"
      "         push    rsp                                                                                 \n"
      "         push    rbp                                                                                 \n"
      "         push    rsi                                                                                 \n"
      "         push    rdi                                                                                 \n"
      "                                                                                                     \n"
      " 		xor		ebx, ebx				# It means - change sign                                    \n"
      "                                                                                                     \n"
      " 		mov		rsi, rdx                                                                            \n"
      " 		test	rsi, rsi                                                                            \n"
      " 		je		L_LHN_INCORRECT_ADDRESS                                                             \n"
      " 		                                                                                            \n"
      " 		                                                                                            \n"
      " 		L_LBN_CHECK_MINUS_AND_DOLLAR_AGAIN:                                                         \n"
      " 		cmp		byte ptr [rsi], '-'                                                                 \n"
      " 		jne		L_LHN_ITS_NOT_MINUS                                                                 \n"
      " 		inc		rsi                                                                                 \n"
      " 		not		ebx                                                                                 \n"
      " 		jmp		L_LBN_CHECK_MINUS_AND_DOLLAR_AGAIN                                                  \n"
      " 		L_LHN_ITS_NOT_MINUS:                                                                        \n"
      " 		                                                                                            \n"
      " 		cmp		byte ptr [rsi], '$'                                                                 \n"
      " 		jne		L_LBN_ITS_NOT_DOLLAR                                                                \n"
      " 		inc		rsi                                                                                 \n"
      " 		jmp		L_LBN_CHECK_MINUS_AND_DOLLAR_AGAIN                                                  \n"
      " 		L_LBN_ITS_NOT_DOLLAR:                                                                       \n"
      " 		                                                                                            \n"
      " 		                                                                                            \n"
      " 		L_LHN_CHECK_HEX_SYMBOL_AGAIN:                                                               \n"
      " 		cmp		byte ptr [rsi], '0'                                                                 \n"
      " 		jne		L_LHN_DONT_SHIFT                                                                    \n"
      " 		cmp		byte ptr [rsi+1], 'X'                                                               \n"
      " 		je		L_LHN_FOUND_HEX_SYMBOL                                                              \n"
      " 		cmp		byte ptr [rsi+1], 'x'                                                               \n"
      " 		je		L_LHN_FOUND_HEX_SYMBOL                                                              \n"
      " 		inc		rsi                                                                                 \n"
      " 		jmp		L_LHN_CHECK_HEX_SYMBOL_AGAIN                                                        \n"
      " 		L_LHN_FOUND_HEX_SYMBOL:                                                                     \n"
      " 		add		rsi, 2                                                                              \n"
      " 		L_LHN_DONT_SHIFT:                                                                           \n"
      " 		                                                                                            \n"
      " 		                                                                                            \n"
      " 		push	4                                                                                   \n"
      " 		fild	dword ptr [rsp]			# It's to do multiply                                       \n"
      " 		pop		rax                                                                                 \n"
      " 		fldz							# It will be loaded number                                  \n"
      " 		                                                                                            \n"
      " 		                                                                                            \n"
      " 		xor		eax, eax                                                                            \n"
      " 		push	rax                                                                                 \n"
      " 		L_LHN_RESTART_LOOP:                                                                         \n"
      " 		mov		al, [rsi]                                                                           \n"
      " 		cmp		al, 0x00				# end of string                                             \n"
      " 		je		L_LHN_FINISH                                                                        \n"
      " 		cmp		al, 0x1D				# group separator	(oddziela sekcje)                       \n"
      " 		je		L_LHN_FINISH                                                                        \n"
      " 		cmp		al, 'H'					# last hexadecimal char                                     \n"
      " 		je		L_LHN_FINISH                                                                        \n"
      " 		cmp		al, 'h'					# last hexadecimal char                                     \n"
      " 		je		L_LHN_FINISH                                                                        \n"
      " 		cmp		al, '.'                                                                             \n"
      " 		je		L_LHN_START_LOAD_VALUE_AFTER_DOT                                                    \n"
      " 		                                                                                            \n"
      " 		                                                                                            \n"
      " 		sub		al, 0x30                                                                            \n"
      " 		cmp		al, 0x9                                                                             \n"
      " 		jbe		L_LHN_VALUE_IS_READY                                                                \n"
      " 		sub		al, 0x7                                                                             \n"
      " 		cmp		al, 0xF                                                                             \n"
      " 		jbe		L_LHN_VALUE_IS_READY                                                                \n"
      " 		sub		al, 0x20                                                                            \n"
      " 		                                                                                            \n"
      " 		L_LHN_VALUE_IS_READY:                                                                       \n"
      " 		fscale                                                                                      \n"
      " 		mov		[rsp], eax                                                                          \n"
      " 		fild	dword ptr [rsp]                                                                     \n"
      " 		faddp	st(1), st(0)                                                                        \n"
      " 		inc		rsi                                                                                 \n"
      " 		jmp		L_LHN_RESTART_LOOP                                                                  \n"
      " 		                                                                                            \n"
      " 		                                                                                            \n"
      " 		                                                                                            \n"
      " 		                                                                                            \n"
      " 		                                                                                            \n"
      " 		                                                                                            \n"
      " 		                                                                                            \n"
      " 		L_LHN_START_LOAD_VALUE_AFTER_DOT:                                                           \n"
      " 		fxch	st(1)                                                                               \n"
      " 		fchs                                                                                        \n"
      " 		fldz                                                                                        \n"
      " 		mov		rdi, rsi                                                                            \n"
      " 		L_LHN_CHECK_NEXT_CHAR_FOR_FIND_END_OF_VALUE:                                                \n"
      " 		inc		rsi                                                                                 \n"
      " 		mov		al, [rsi]                                                                           \n"
      " 		cmp		al, 00                                                                              \n"
      " 		je		L_LHN_LOAD_DOT_VALUE                                                                \n"
      " 		cmp		al, 0x1D					# group separator	(oddziela sekcje)                   \n"
      " 		jne		L_LHN_CHECK_NEXT_CHAR_FOR_FIND_END_OF_VALUE                                         \n"
      " 		                                                                                            \n"
      " 		L_LHN_LOAD_DOT_VALUE:                                                                       \n"
      " 		dec		rsi                                                                                 \n"
      " 		L_LHN_RESTART_DOT_LOOP:                                                                     \n"
      " 		mov		al, [rsi]                                                                           \n"
      " 		                                                                                            \n"
      " 		sub		al, 0x30                                                                            \n"
      " 		cmp		al, 0x09                                                                            \n"
      " 		jbe		L_LHN_ADD_NEXT_DOT_VALUE                                                            \n"
      " 		                                                                                            \n"
      " 		sub		al, 0x7                                                                             \n"
      " 		cmp		al, 0x0F                                                                            \n"
      " 		jbe		L_LHN_ADD_NEXT_DOT_VALUE                                                            \n"
      " 		sub		al, 0x20                                                                            \n"
      " 		cmp		al, 0x0F                                                                            \n"
      " 		ja		L_LHN_SKIP_DOT_ADDITION                                                             \n"
      " 		                                                                                            \n"
      " 		L_LHN_ADD_NEXT_DOT_VALUE:                                                                   \n"
      " 		fscale                                                                                      \n"
      " 		mov		[rsp], eax                                                                          \n"
      " 		fild	dword ptr [rsp]                                                                     \n"
      " 		faddp	st(1), st(0)                                                                        \n"
      " 		                                                                                            \n"
      " 		L_LHN_SKIP_DOT_ADDITION:                                                                    \n"
      " 		dec		rsi                                                                                 \n"
      " 		cmp		rsi,rdi                                                                             \n"
      " 		ja		L_LHN_RESTART_DOT_LOOP                                                              \n"
      " 		                                                                                            \n"
      " 		                                                                                            \n"
      " 		                                                                                            \n"
      " 		L_LHN_DOT_FINISH:                                                                           \n"
      " 		fscale                                                                                      \n"
      " 		fincstp                                                                                     \n"
      " 		fxch	st(1)                                                                               \n"
      " 		fdecstp                                                                                     \n"
      " 		faddp	st(1), st(0)                                                                        \n"
      " 		                                                                                            \n"
      " 		L_LHN_FINISH:                                                                               \n"
      " 		pop		rax                                                                                 \n"
      " 		test	ebx, ebx                                                                            \n"
      " 		je		L_LHN_DONT_CHANGE_SIGN                                                              \n"
      " 		fchs                                                                                        \n"
      " 		L_LHN_DONT_CHANGE_SIGN:                                                                     \n"
      " 		ffree	st(1)                                                                               \n"
      " 		                                                                                            \n"
      " L_LHN_INCORRECT_ADDRESS:                                                                            \n"
      "         pop rdi                                                                                     \n"
      "         pop rsi                                                                                     \n"
      "         pop rbp                                                                                     \n"
      "         pop rsp                                                                                     \n"
      "         pop rbx                                                                                     \n"
      "         pop rdx                                                                                     \n"
      "         pop rax                                                                                     \n"
      " 		ret                                                                                         \n"
      "                                                                                                     \n"
      "                                                                                                     \n"
      " #----------------------------------------------------                                               \n"
      " #				BINARY NUMBER TO FPU                                                                \n"
      " #----------------------------------------------------                                               \n"
      "                                                                                                     \n"
      " INI_Load_binary_number_to_FPU: #PROC                                                                \n"
      "                                                                                                     \n"
      "         push    rax                                                                                 \n"
      "         push    rdx                                                                                 \n"
      "         push    rbx                                                                                 \n"
      "         push    rsp                                                                                 \n"
      "         push    rbp                                                                                 \n"
      "         push    rsi                                                                                 \n"
      "         push    rdi                                                                                 \n"
      "                                                                                                     \n"
      " 		xor		ebx, ebx				# It means - change sign                                    \n"
      "                                                                                                     \n"
      " 		test	rdx, rdx                                                                            \n"
      " 		je		L_LBN_INCORRECT_ADDRESS                                                             \n"
      " 		mov		rsi, rdx                                                                            \n"
      " 		                                                                                            \n"
      " 		                                                                                            \n"
      " 		L_LBN_CHECK_MINUS_AND_PERCENT_AGAIN:                                                        \n"
      " 		cmp		byte ptr [rsi], '-'                                                                 \n"
      " 		jne		L_LBN_ITS_NOT_MINUS                                                                 \n"
      " 		inc		rsi                                                                                 \n"
      " 		not		ebx                                                                                 \n"
      " 		jmp		L_LBN_CHECK_MINUS_AND_PERCENT_AGAIN                                                 \n"
      " 		L_LBN_ITS_NOT_MINUS:                                                                        \n"
      " 		                                                                                            \n"
      " 		cmp		byte ptr [rsi], '%'                                                                 \n"
      " 		jne		L_LBN_ITS_NOT_PERCENT                                                               \n"
      " 		inc		rsi                                                                                 \n"
      " 		jmp		L_LBN_CHECK_MINUS_AND_PERCENT_AGAIN                                                 \n"
      " 		L_LBN_ITS_NOT_PERCENT:                                                                      \n"
      " 		                                                                                            \n"
      " 		                                                                                            \n"
      " 		push	1                                                                                   \n"
      " 		fild	dword ptr [rsp]			# It's to do multiply                                       \n"
      " 		pop		rax                                                                                 \n"
      " 		fldz							# It will be loaded number                                  \n"
      " 		                                                                                            \n"
      " 		                                                                                            \n"
      " 		xor		eax, eax                                                                            \n"
      " 		push	rax                                                                                 \n"
      " 		L_LBN_RESTART_LOOP:                                                                         \n"
      " 		mov		al, [rsi]                                                                           \n"
      " 		cmp		al, 0x00                                                                            \n"
      " 		je		L_LBN_FINISH                                                                        \n"
      " 		cmp		al, 0x1D				# group separator	(oddziela sekcje)                       \n"
      " 		je		L_LBN_FINISH                                                                        \n"
      " 		cmp		al, 'b'				    # binary num symbol                                         \n"
      " 		je		L_LBN_FINISH                                                                        \n"
      " 		cmp		al, '.'                                                                             \n"
      " 		je		L_LBN_START_LOAD_VALUE_AFTER_DOT                                                    \n"
      " 		                                                                                            \n"
      " 		                                                                                            \n"
      " 		sub		al, 0x30                                                                            \n"
      " 		mov		[rsp], eax                                                                          \n"
      " 		fscale                                                                                      \n"
      " 		fild	dword ptr [rsp]                                                                     \n"
      " 		faddp	st(1), st(0)                                                                        \n"
      " 		inc		rsi                                                                                 \n"
      " 		jmp		L_LBN_RESTART_LOOP                                                                  \n"
      " 		                                                                                            \n"
      " 		                                                                                            \n"
      " 		                                                                                            \n"
      " 		                                                                                            \n"
      " 		                                                                                            \n"
      " 		                                                                                            \n"
      " 		                                                                                            \n"
      " 		L_LBN_START_LOAD_VALUE_AFTER_DOT:                                                           \n"
      " 		fxch	st(1)                                                                               \n"
      " 		fchs                                                                                        \n"
      " 		fldz                                                                                        \n"
      " 		mov		rdi, rsi                                                                            \n"
      " 		L_LBN_CHECK_NEXT_CHAR_FOR_FIND_END_OF_VALUE:                                                \n"
      " 		inc		rsi                                                                                 \n"
      " 		mov		al, [rsi]                                                                           \n"
      " 		cmp		al, 0x00                                                                            \n"
      " 		je		L_LBN_LOAD_DOT_VALUE                                                                \n"
      " 		cmp		al, 0x1D					# group separator	(oddziela sekcje)                   \n"
      " 		je		L_LBN_LOAD_DOT_VALUE                                                                \n"
      " 		cmp		al, 'b'					# binary num symbol                                         \n"
      " 		jne		L_LBN_CHECK_NEXT_CHAR_FOR_FIND_END_OF_VALUE                                         \n"
      " 		                                                                                            \n"
      " 		L_LBN_LOAD_DOT_VALUE:                                                                       \n"
      " 		dec		rsi                                                                                 \n"
      " 		L_LBN_RESTART_DOT_LOOP:                                                                     \n"
      " 		mov		al, [rsi]                                                                           \n"
      " 		                                                                                            \n"
      " 		sub		al, 0x30                                                                            \n"
      " 		cmp		al, 1                                                                               \n"
      " 		ja		L_LBN_SKIP_DOT_ADDITION                                                             \n"
      " 		                                                                                            \n"
      " 		                                                                                            \n"
      " 		                                                                                            \n"
      " 		fscale                                                                                      \n"
      " 		mov		[rsp], eax                                                                          \n"
      " 		fild	dword ptr [rsp]                                                                     \n"
      " 		faddp	st(1), st(0)                                                                        \n"
      " 		L_LBN_SKIP_DOT_ADDITION:                                                                    \n"
      " 		dec		rsi                                                                                 \n"
      " 		cmp		rsi,rdi                                                                             \n"
      " 		ja		L_LBN_RESTART_DOT_LOOP                                                              \n"
      " 		                                                                                            \n"
      " 		                                                                                            \n"
      " 		                                                                                            \n"
      " 		L_LBN_DOT_FINISH:                                                                           \n"
      " 		fscale                                                                                      \n"
      " 		fincstp                                                                                     \n"
      " 		fxch	st(1)                                                                               \n"
      " 		fdecstp                                                                                     \n"
      " 		faddp	st(1), st(0)                                                                        \n"
      " 		                                                                                            \n"
      " 		L_LBN_FINISH:                                                                               \n"
      " 		pop		rax                                                                                 \n"
      " 		test	ebx, ebx                                                                            \n"
      " 		je		L_LBN_DONT_CHANGE_SIGN                                                              \n"
      " 		fchs                                                                                        \n"
      " 		L_LBN_DONT_CHANGE_SIGN:                                                                     \n"
      " 		ffree	st(1)                                                                               \n"
      " 		                                                                                            \n"
      " L_LBN_INCORRECT_ADDRESS:                                                                            \n"
      "         pop rdi                                                                                     \n"
      "         pop rsi                                                                                     \n"
      "         pop rbp                                                                                     \n"
      "         pop rsp                                                                                     \n"
      "         pop rbx                                                                                     \n"
      "         pop rdx                                                                                     \n"
      "         pop rax                                                                                     \n"
      " 		ret                                                                                         \n"
      "                                                                                                     \n"
      "                                                                                                     \n"
      " #----------------------------------------------------                                               \n"
      " #				HTML COLOUR TO FPU                                                                  \n"
      " #----------------------------------------------------                                               \n"
      "                                                                                                     \n"
      " INI_Load_html_colour_to_FPU: #PROC                                                                  \n"
      "                                                                                                     \n"
      "         push rax                                                                                    \n"
      "         push rcx                                                                                    \n"
      "         push rbx                                                                                    \n"
      "         push rbp                                                                                    \n"
      "         push rsi                                                                                    \n"
      "         push rdi                                                                                    \n"
      "                                                                                                     \n"
      " 		test	rdx, rdx                                                                            \n"
      " 		je		L_LHC_INCORRECT_ADDRESS                                                             \n"
      " 		mov		rsi, rdx                                                                            \n"
      " 		                                                                                            \n"
      " 		mov		bl, 0x06					# six chars to load                                     \n"
      " 		                                                                                            \n"
      " 		                                                                                            \n"
      " 		L_LHC_CHECK_MINUS_AND_PERCENT_AGAIN:                                                        \n"
      " 		cmp		byte ptr [rsi], '#'                                                                 \n"
      " 		jne		L_LHC_ITS_NOT_HASHTAG                                                               \n"
      " 		inc		rsi                                                                                 \n"
      " 		jmp		L_LHC_CHECK_MINUS_AND_PERCENT_AGAIN                                                 \n"
      " 		L_LHC_ITS_NOT_HASHTAG:                                                                      \n"
      "                                                                                                     \n"
      " 		                                                                                            \n"
      " 		push	4                                                                                   \n"
      " 		fild	dword ptr [rsp]			# It's to do multiply                                       \n"
      " 		pop		rax                                                                                 \n"
      " 		fldz							# It will be loaded number                                  \n"
      " 		                                                                                            \n"
      " 		                                                                                            \n"
      " 		xor		eax, eax                                                                            \n"
      " 		push	rax                                                                                 \n"
      " 		L_LHC_RESTART_LOOP:                                                                         \n"
      " 		mov		al, [rsi]                                                                           \n"
      " 		cmp		al, 0x00					# end of string                                         \n"
      " 		je		L_LHC_FINISH                                                                        \n"
      " 		cmp		al, 0x1D					# group separator	(oddziela sekcje)                   \n"
      " 		je		L_LHC_FINISH                                                                        \n"
      " 		                                                                                            \n"
      " 		                                                                                            \n"
      " 		sub		al, 0x30                                                                            \n"
      " 		cmp		al, 0x9                                                                             \n"
      " 		jbe		L_LHC_VALUE_IS_READY                                                                \n"
      " 		sub		al, 0x7                                                                             \n"
      " 		cmp		al, 0xF                                                                             \n"
      " 		jbe		L_LHC_VALUE_IS_READY                                                                \n"
      " 		sub		al, 0x20                                                                            \n"
      " 		                                                                                            \n"
      " 		L_LHC_VALUE_IS_READY:                                                                       \n"
      " 		fscale                                                                                      \n"
      " 		mov		[rsp], eax                                                                          \n"
      " 		fild	dword ptr [rsp]                                                                     \n"
      " 		faddp	st(1), st(0)                                                                        \n"
      " 		inc		rsi                                                                                 \n"
      " 		dec		bl                                                                                  \n"
      " 		jne		L_LHC_RESTART_LOOP                                                                  \n"
      " 		                                                                                            \n"
      " 		                                                                                            \n"
      " 		L_LHC_FINISH:                                                                               \n"
      " 		ffree	st(1)                                                                               \n"
      " 		fistp	dword ptr [rsp]                                                                     \n"
      " 		pop		rax                                                                                 \n"
      " 		                                                                                            \n"
      " 		bswap	eax                                                                                 \n"
      " 		shr		eax, 0x08                                                                           \n"
      " 		                                                                                            \n"
      " 		# shift because of missing chars                                                            \n"
      " 		shl		bl,  0x02                                                                           \n"
      " 		mov		cl,  bl                                                                             \n"
      " 		shr		eax, cl                                                                             \n"
      " 		                                                                                            \n"
      " 		# load to FPU final value                                                                   \n"
      " 		push	rax                                                                                 \n"
      " 		fild	dword ptr [rsp]                                                                     \n"
      " 		pop		rax                                                                                 \n"
      " 		                                                                                            \n"
      " 		                                                                                            \n"
      " 		L_LHC_INCORRECT_ADDRESS:                                                                    \n"
      "         pop rdi                                                                                     \n"
      "         pop rsi                                                                                     \n"
      "         pop rbp                                                                                     \n"
      "         pop rbx                                                                                     \n"
      "         pop rcx                                                                                     \n"
      "         pop rax                                                                                     \n"
      " 		ret                                                                                         \n"
      "                                                                                                     \n"
      "                                                                                                     \n"
      " #----------------------------------------------------                                               \n"
      " #				GET EVERY NUMBER TO FPU                                                             \n"
      " #----------------------------------------------------                                               \n"
      " .globl Get_number                                                                                   \n"
      "                                                                                                     \n"
      " Get_number: #PROC                                                                                   \n"
      "                                                                                                     \n"
      " 		call	INI_Check_is_it_a_binary_number                                                     \n"
      " 		test	eax, eax                                                                            \n"
      " 		je		L_TEST_ITS_NOT_BINARY                                                               \n"
      " 		call	INI_Load_binary_number_to_FPU                                                       \n"
      " 		jmp		L_TEST_FINISH                                                                       \n"
      " 	L_TEST_ITS_NOT_BINARY:                                                                          \n"
      "                                                                                                     \n"
      " 		call	INI_Check_is_it_a_decimal_number                                                    \n"
      " 		test	eax, eax                                                                            \n"
      " 		je		L_TEST_ITS_NOT_DECIMAL                                                              \n"
      " 		call	INI_Load_decimal_number_to_FPU                                                      \n"
      " 		jmp		L_TEST_FINISH                                                                       \n"
      " 	L_TEST_ITS_NOT_DECIMAL:                                                                         \n"
      "                                                                                                     \n"
      " 		call	INI_Check_is_it_a_hexadecimal_number                                                \n"
      " 		test	eax, eax                                                                            \n"
      " 		je		L_TEST_ITS_NOT_HEXADECIMAL                                                          \n"
      " 		call	INI_Load_hexadecimal_number_to_FPU                                                  \n"
      " 		jmp		L_TEST_FINISH                                                                       \n"
      " 	L_TEST_ITS_NOT_HEXADECIMAL:                                                                     \n"
      "                                                                                                     \n"
      " 		call	INI_Check_is_it_a_html_colour                                                       \n"
      " 		test	eax, eax                                                                            \n"
      " 		je		L_TEST_ITS_NOT_HTML_COLOUR                                                          \n"
      " 		call	INI_Load_html_colour_to_FPU                                                         \n"
      " 		jmp		L_TEST_FINISH                                                                       \n"
      " 	L_TEST_ITS_NOT_HTML_COLOUR:                                                                     \n"
      " 	                                                                                                \n"
      " 		fldz	# 0 if it was incorrect value                                                       \n"
      " 		xor		eax, eax                                                                            \n"
      "                                                                                                     \n"
      " 	L_TEST_FINISH:                                                                                  \n"
      "         fstp    tbyte ptr [rcx]                                                                     \n"
      " 		ret		                                                                                    \n"
    );


template <typename T>
T StrGetNum (char* txt)
{
    cout << "StrGetNum" << endl;
    long double result = 0.0;

    Get_number  (&result, txt); //result will be in RCX, and txt will be in RDX

    return (T)result;
}
